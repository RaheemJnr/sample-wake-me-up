// MIT License
//
// Copyright (c) 2021 Romain Guy
// Copyright (c) 2021 Felix Westin
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// The following code is adapted from https://github.com/Fewes/MinimalAtmosphere

material {
    name : Skybox,
    parameters : [
        {
           type : float3,
           name : lightDirection
        },
        {
           type : float3,
           name : lightColor
        },
        {
           type : float4,
           name : sun
        },
        {
           type : float,
           name : lightIntensity
        }
    ],
    variables : [
         eyeDirection
    ],
    vertexDomain : device,
    depthWrite : false,
    shadingModel : unlit,
    variantFilter : [ skinning, shadowReceiver, vsm ],
    culling: none
}

fragment {
    #define SCATTERING_SAMPLE_COUNT    32.0
    #define OPTICAL_DEPTH_SAMPLE_COUNT 8.0

    #define EPS                 1e-6.0
    #define INFINITY            1.0 / 0.0
    #define PLANET_RADIUS       6371000.0
    #define PLANET_CENTER       float3(0, -PLANET_RADIUS, 0.0)
    #define ATMOSPHERE_HEIGHT   100000.0
    #define RAYLEIGH_HEIGHT     (ATMOSPHERE_HEIGHT * 0.08)
    #define MIE_HEIGHT          (ATMOSPHERE_HEIGHT * 0.012)

    // -------------------------------------
    // Coefficients
    #define C_RAYLEIGH          (float3(5.802, 13.558, 33.100) * 1e-6)
    #define C_MIE               (float3(3.996,  3.996,  3.996) * 1e-6)
    #define C_OZONE             (float3(0.650,  1.881,  0.085) * 1e-6)

    #define ATMOSPHERE_DENSITY  1.0
    #define EXPOSURE            20.0

    float2 sphereIntersection(
            float3 rayStart,
            float3 rayDir,
            float3 sphereCenter,
            float sphereRadius
    ) {
        rayStart -= sphereCenter;
        float a = dot(rayDir, rayDir);
        float b = 2.0 * dot(rayStart, rayDir);
        float c = dot(rayStart, rayStart) - (sphereRadius * sphereRadius);
        float d = b * b - 4.0 * a * c;
        if (d < 0.0) {
            return float2(-1.0);
        } else {
            d = sqrt(d);
            return float2(-b - d, -b + d) / (2.0 * a);
        }
    }

    float2 planetIntersection(float3 rayStart, float3 rayDir) {
        return sphereIntersection(rayStart, rayDir, PLANET_CENTER, PLANET_RADIUS);
    }

    float2 atmosphereIntersection(float3 rayStart, float3 rayDir) {
        return sphereIntersection(rayStart, rayDir, PLANET_CENTER, PLANET_RADIUS + ATMOSPHERE_HEIGHT);
    }

    // Phase functions
    float phaseRayleigh(float costh) {
        return 3.0 * (1.0 + costh * costh) / (16.0 * PI);
    }

    float phaseMie(float costh) {
        float g = 0.85; // TODO: default value, use an overload to pass g as a parameter
        g = min(g, 0.9381);
        float k = 1.55 * g - 0.55 * g * g * g;
        float kcosth = k * costh;
        return (1.0 - k * k) / ((4.0 * PI) * (1.0 - kcosth) * (1.0 - kcosth));
    }

    // Atmosphere
    float atmosphereHeight(float3 positionWS) {
        return distance(positionWS, PLANET_CENTER) - PLANET_RADIUS;
    }

    float densityRayleigh (float h) {
        return exp(-max(0.0, h / RAYLEIGH_HEIGHT));
    }

    float densityMie(float h) {
        return exp(-max(0.0, h / MIE_HEIGHT));
    }

    float densityOzone(float h) {
        // The ozone layer is represented as a tent function with a width of 30km, centered
        // around an altitude of 25km.
        return max(0.0, 1.0 - abs(h - 25000.0) / 15000.0);
    }

    float3 atmosphereDensity(float h) {
        return float3(densityRayleigh(h), densityMie(h), densityOzone(h));
    }

    // Optical depth is a unitless measurement of the amount of absorption of a participating medium
    // (such as the atmosphere).
    // This function calculates just that for our three atmospheric elements:
    // R: Rayleigh
    // G: Mie
    // B: Ozone
    // If you find the term "optical depth" confusing, you can think of it as "how much density
    // was found along the ray in total".
    float3 integrateOpticalDepth(float3 rayStart, float3 rayDir) {
        float2 intersection = atmosphereIntersection(rayStart, rayDir);
        float  rayLength    = intersection.y;

        float  sampleCount  = OPTICAL_DEPTH_SAMPLE_COUNT;
        float  stepSize     = rayLength / sampleCount;

        float3 opticalDepth = float3(0.0);

        for (float i = 0.0; i < sampleCount; i += 1.0) {
            float3 localPosition = rayStart + rayDir * (i + 0.5) * stepSize;
            float  localHeight   = atmosphereHeight(localPosition);
            float3 localDensity  = atmosphereDensity(localHeight) * stepSize;

            opticalDepth += localDensity;
        }

        return opticalDepth;
    }

    // Calculate a luminance transmittance value from optical depth.
    float3 absorb(float3 opticalDepth) {
        // Note that Mie results in slightly more light absorption than scattering, about 10%
        return exp(
                -(opticalDepth.x * C_RAYLEIGH + opticalDepth.y * C_MIE * 1.1 +
                        opticalDepth.z * C_OZONE) * ATMOSPHERE_DENSITY);
    }

    // Integrate scattering over a ray for a single directional light source.
    // Also return the transmittance for the same ray as we are already calculating the
    // optical depth anyway.
    float3 integrateScattering(
            float3 rayStart,
            float3 rayDir,
            float rayLength,
            float3 lightDir,
            float3 lightColor,
            out float3 transmittance
    ) {
        // We can reduce the number of atmospheric samples required to converge by spacing them
        // exponentially closer to the camera.
        // This breaks space view however, so let's compensate for that with an exponent that
        // "fades" to 1 as we leave the atmosphere.
        float  rayHeight = atmosphereHeight(rayStart);
        float  sampleDistributionExponent =
                1.0 + saturate(1.0 - rayHeight / ATMOSPHERE_HEIGHT) * 8.0;

        float2 intersection = atmosphereIntersection(rayStart, rayDir);
        rayLength = min(rayLength, intersection.y);
        if (intersection.x > 0.0) {
            // Advance ray to the atmosphere entry point
            rayStart += rayDir * intersection.x;
            rayLength -= intersection.x;
        }

        float  costh    = dot(rayDir, lightDir);
        float  phaseR   = phaseRayleigh(costh);
        float  phaseM   = phaseMie(costh);

        float  sampleCount  = SCATTERING_SAMPLE_COUNT;

        float3 opticalDepth = float3(0.0);
        float3 rayleigh     = float3(0.0);
        float3 mie          = float3(0.0);

        float  prevRayTime  = 0.0;

        for (float i = 0.0; i < sampleCount; i += 1.0) {
            float  rayTime = pow(i / sampleCount, sampleDistributionExponent) * rayLength;
            // Because we are distributing the samples exponentially, we have to calculate
            // the step size per sample.
            float  stepSize = (rayTime - prevRayTime);

            float3 localPosition = rayStart + rayDir * rayTime;
            float  localHeight   = atmosphereHeight(localPosition);
            float3 localDensity  = atmosphereDensity(localHeight) * stepSize;

            opticalDepth += localDensity;

            float3 opticalDepthLight  = integrateOpticalDepth(localPosition, lightDir);
            float3 lightTransmittance = absorb(opticalDepth + opticalDepthLight);

            rayleigh += lightTransmittance * phaseR * localDensity.x;
            mie      += lightTransmittance * phaseM * localDensity.y;

            prevRayTime = rayTime;
        }

        transmittance = absorb(opticalDepth);

        return (rayleigh * C_RAYLEIGH + mie * C_MIE) * lightColor * EXPOSURE;
    }


    void material(inout MaterialInputs material) {
        prepareMaterial(material);

        float3 rayStart = getWorldCameraPosition() + getWorldOffset();
        float3 rayDir = normalize(getWorldPosition() - getWorldCameraPosition());
        float rayLength = INFINITY;

        float3 transmittance;
        float3 lightDir = materialParams.lightDirection;
        float3 lightColor = materialParams.lightColor;

        float4 sky;
        sky.rgb = integrateScattering(
                rayStart, rayDir, rayLength, lightDir, float3(1.0), transmittance);
        sky.a = 1.0;

        if (planetIntersection(rayStart, rayDir).x < 0.0) {
            float3 direction = normalize(variable_eyeDirection.xyz);
            float3 sun = lightColor * (materialParams.lightIntensity * (4.0 * PI));
            float cosAngle = dot(direction, lightDir);
            float x = (cosAngle - materialParams.sun.x) * materialParams.sun.z;
            float gradient = pow(1.0 - saturate(x), materialParams.sun.w);
            sky.rgb += gradient * sun;
        }

        material.baseColor = sky;
    }
}

vertex {
    void materialVertex(inout MaterialVertexInputs material) {
        float3 p = getPosition().xyz;
        float3 unprojected = mulMat4x4Float3(getViewFromClipMatrix(), p).xyz;
        material.eyeDirection.xyz = mulMat3x3Float3(getWorldFromViewMatrix(), unprojected);
    }
}
